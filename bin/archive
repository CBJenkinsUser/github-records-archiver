#!/usr/bin/env ruby
# Backs up a GitHub organization's repositories and
# all their associated information for archival purposes.
# Usage: ruby archive.rb

require './lib/github_records_archiver'

# properties to extract from each issue for the archive
# milestone_keys = [:title, :number, :description, :state]
# team_member_keys = [:login, :site_admin, :type]
# team_repo_keys = [:name, :full_name, :permissions]

def log(msg)
  GitHubRecordsArchiver.logger.info(msg)
end

archiver = GitHubRecordsArchiver
pwd      = Dir.pwd
start    = Time.now
org_name = ARGV[0] || ENV['GITHUB_ORGANIZATION']
org      = archiver::Organization.new org_name

log "Starting archive for @#{org.name} in #{org.archive_dir}"

log "Found #{org.teams.count} teams"
org.teams.each do |team|
  log "Archiving team #{team.data[:slug]} to #{team.path}"
  team.archive
end

log "Found #{org.repos.count} repos"
org.repos.each do |repo|
  log "Archiving #{repo.name} to #{repo.repo_dir}"
  repo.clone

  unless repo.wiki.nil?
    log "Archiving #{repo.name}'s Wiki to #{repo.wiki.repo_dir}"
    repo.wiki.clone
  end

  log "Found #{repo.issues.count} issues for #{repo.name}"
  repo.issues.each do |issue|
    log "Archiving issue ##{issue.number} to #{issue.path}"
    log "Found #{issue.comments.count} comments for issue ##{issue.number}"

    issue.archive
  end
end

Dir.chdir pwd
log "Done in #{Time.now - start} seconds."
